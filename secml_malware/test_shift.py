import os
import magic
from secml.array import CArray

from secml_malware.models.malconv import MalConv
from secml_malware.models.c_classifier_end2end_malware import CClassifierEnd2EndMalware, End2EndModel

net = MalConv()
net = CClassifierEnd2EndMalware(net)
net.load_pretrained_model()

from secml_malware.attack.whitebox.c_shift_evasion import CFormatExploitEvasion

shift_bytes = CFormatExploitEvasion(net,  preferable_extension_amount= 0x200, pe_header_extension=0, random_init=False, iterations=0, threshold=0.5)

folder = '/home/omnisky/zhan/secml_malpatch/dataset/val/'
X = []
y = []
file_path = []
avg_success = 0
for i, f in enumerate(os.listdir(folder)):
    path = os.path.join(folder, f)
    # if 'petya' not in path:
    #     continue
    # if "PE32" not in magic.from_file(path):
    #     continue

    with open(path, "rb") as file_handle:
        code = file_handle.read()
    x = End2EndModel.bytes_to_numpy(
        code, net.get_input_max_length(), 256, False
    )
    _, confidence = net.predict(CArray(x), True)

    if confidence[0, 1].item() < 0.5:
        continue

    print(f"> Added {f} with confidence {confidence[0,1].item()}")
    X.append(x)
    conf = confidence[1][0].item()
    y.append([1 - conf, conf])
    file_path.append(path)

for sample, label, path in zip(X, y, file_path):
    y_pred, adv_score, adv_ds, f_obj = shift_bytes.run(CArray(sample), CArray(label[1]))
    print(shift_bytes.confidences_)
    print(f_obj)

    adv_x = adv_ds.X[0, :]
    real_adv_x = shift_bytes.create_real_sample_from_adv(path, adv_x)
    print(len(real_adv_x))
    real_x = End2EndModel.bytes_to_numpy(real_adv_x, net.get_input_max_length(), 256, False)
    _, confidence = net.predict(CArray(real_x), True)
    print(confidence[0, 1].item())